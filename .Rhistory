devtools::test()
testdata %>% mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]),
logical   =  rep(c(TRUE, FALSE), length.out = n))
df_apply(testdata,  round, is.numeric, toupper, digits = 2)
testdata %>% mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]),
logical   =  rep(c(TRUE, FALSE), length.out = n))
testdata <- dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
character = LETTERS[1L:n],
factor = toupper(letters[1L:n]),
logical = rep(c(TRUE, FALSE), length.out = n) )
df_apply(testdata,  round, is.numeric, toupper, digits = 2)
testdata %>% mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]),
logical   =  rep(c(TRUE, FALSE), length.out = n))
testdata <- dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
character = LETTERS[1L:n],
factor = toupper(letters[1L:n]))
testdata
testdata <- dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
character = LETTERS[1L:n],
factor = letters[1L:n])
testdata
df_apply(testdata,  round, is.numeric, toupper, digits = 2)
testdata %>% mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]))
devtools::test()
load_all()
rm(list = c("df_apply"))
rm(list = c("df_apply"))
devtools::load_all()
devtools::check()
devtools::test()
View(TestData)
testdata
testdata %>% df_apply(round, is.numericr, digits = 2),
testdata %>% df_apply(round, is.numericr, digits = 2)
testdata %>% df_apply(round, is.numeric, digits = 2)
testdata %>% df_apply(round, is.numeric, digits = 2)
testdata %>% dplyr::mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n])
testdata %>% dplyr::mutate(
testdata %>% dplyr::mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]))
testdata %>% df_apply(round, is.numeric, digits = 2)
testdata %>% dplyr::mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]))
testdata %>% dplyr::mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
factor = letters[1L:n])
testdata %>% df_apply(str_detect, toupper, digits = 2)
df_apply <- function(.data, .f, .condition = is.numeric, .else = identity, ...){
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
as.data.frame()
}
testdata %>% df_apply(str_detect, toupper, digits = 2)
testdata %>% df_apply(toupper, str_detect, digits = 2)
is.numeric
testdata %>% df_apply(toupper, isalpha, digits = 2)
testdata %>% df_apply(toupper, is.alpha, digits = 2)
testdata
testdata %>% df_apply(toupper, is_character, digits = 2)
testdata %>% df_apply(toupper, is_character)
testdata %>% df_apply(toupper, is_character)
testdata %>% dplyr::mutate(
double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor =  factor(letters[1L:n]))
testdata %>% dplyr::mutate(
double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor = letters[1L:n])
testdata %>% df_apply(toupper, is_character)
testdata %>% dplyr::mutate(
double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor = letters[1L:n])
testdata %>% dplyr::mutate(
double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]))
testdata %>% df_apply(toupper, is_character)
testdata %>% dplyr::mutate(
double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor = toupper(letters[1L:n]))
devtools::test()
devtools::load_all()
devtools::load_all()
rm(list = c("df_apply"))`
source("~/DATA303/DFapplyFunction/FunctionPkg/tests/testthat/test-test_df_apply.R", echo=TRUE)
`rm(list = c("df_apply"))`
devtools::load_all()
setwd("~/DATA303/DFapplyFunction/FunctionPkg/tests/testthat")
devtools::load_all()
devtools::test()
devtools::test()
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x))
df_apply <- function(.data, .f, .condition = is.numeric, .else = identity, ...){
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x))
}
df_apply(iris, round, is.numeric, toupper)
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
tibble()
df_apply(iris, round, is.numeric, toupper)
df_apply <- function(.data, .f, .condition = is.numeric, .else = identity, ...){
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
tibble()
}
df_apply(iris, round, is.numeric, toupper)
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
as_tibble()
df_apply <- function(.data, .f, .condition = is.numeric, .else = identity, ...){
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
as_tibble()
}
df_apply(iris, round, is.numeric, toupper)
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
as_tibble()
df_apply <- function(.data, .f, .condition = is.numeric, .else = identity, ...){
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
as_tibble()
}
devtools::load_all()
devtools::test()
devtools::test()
df_apply <- function(.data, .f, .condition = is.numeric, .else = identity, ...){
.data |>
lapply( function(.x) if(.condition(.x)) .f(.x, ...) else .else(.x)) %>%
as_tibble()
}
devtools::test()
devtools::test()
TestData |>  df_apply(toupper, is_character),
TestData |>  df_apply(toupper, is_character)
TestData |> dplyr::mutate(
double    = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor =  factor(toupper(letters[1L:n])))
n <- 5L
TestData <-
dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
character = LETTERS[1L:n],
factor = factor(letters[1L:n]))
TestData
TestData |>  df_apply(toupper, is_character)
TestData |> dplyr::mutate(
double    = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor =  factor(toupper(letters[1L:n])))
TestData |>  df_apply(toupper, is_character)
TestData |> dplyr::mutate(
double    = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
factor =  factor(toupper(letters[1L:n])))
TestData |>  df_apply(toupper, is_character)
TestData <-
dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
character = LETTERS[1L:n],
factor = letters[1L:n])
TestData
TestData <-
dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
character = LETTERS[1L:n],
factor = letters[1L:n])
devtools::test()
TestData <-
dplyr::tibble( double = c(5.002, 3.221, 4.008, 5.112, 4.779),
integer   = c(0, 10, 20, 30, 40),
cap = LETTERS[1L:n],
low = letters[1L:n])
TestData
TestData |> dplyr::mutate(
TestData |>  df_apply(toupper, is_character)
TestData |> dplyr::mutate(
TestData |>  df_apply(toupper, is_character)
TestData |> dplyr::mutate(
TestData
TestData %>% df_apply(toupper, is_character)
TestData %>% df_apply(toupper, is_character)
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
TestData %>% mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
low = toupper(letters[1L:n]))
df_apply(iris, round, is.numeric, toupper)
TestData %>% df_apply(toupper, is_character)
TestData %>% mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
low = toupper(letters[1L:n]))
devtools::test()
devtools::test()
rm(list = c("df_apply"))
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(FunctionPkg)
data(df3)
df <- utils::read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
colnames(df) <- c('Country')
df2 <- utils::read.csv('netflix_price.csv')
devtools::load_all()
#Average fruit consumption per person, differentiated by fruit types, measured in kilograms per year.
fruittype <-  read.csv("/home/yh38/DATA303/Data303-Project/303Visualization/docs/plotly-projects/Haoping-He/fruit-consumption-by-fruit-type.csv")
Data <- data("FruitData")
library(DFapplyFunction)
Data <- data("FruitData")
Data
usethis::use_data(Data, FruitData, overwrite = TRUE)
Data <- data("FruitData")
Data
Data <- data("Data")
Data
Data <- data(Data)
Data
Data <- data(Data)
Data
library(FunctionPkg
)
library(FunctionPkg)
Data <- data('Data')
Data
Data <- data(Data)
Data
Pivot_Data_Country <- Pivot_Data_Country
Pivot_Data_Country
Data <- Data
Data
Pivot_Data_Country <- FunctionPkg::Pivot_Data_Country
Data <- FunctionPkg::FruitData
Pivot_Data_Country
Data
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
Pivot_Data_Country <- FunctionPkg::Pivot_Data_Country
Data <- FunctionPkg::FruitData
Top_10_Countries <- Data %>%
dplyr::arrange(desc(Fruit))%>%
utils::head(15)
Pivot_Data <- Data%>%
dplyr::select("Country", 'Code', "Bananas" , "Oranges", "Apples" , "Grapes", "Plantains")%>%
tidyr::pivot_longer(
cols = c("Bananas" , "Oranges", "Apples" , "Grapes", "Plantains"),
names_to = 'FruitType',
values_to = 'Consumption'
)
Countries <- Data %>% dplyr::arrange(desc(Fruit)) %>% utils::head(10)%>% dplyr::select(Country)
Pivot_Data_Country <-Pivot_Data %>%
dplyr::left_join(Data %>% dplyr::select(Country, Fruit), on = Country) %>%
dplyr::filter(Country %in% Countries$Country)%>% dplyr::arrange(desc(Fruit))
Top_10_Countries <- Data %>%
dplyr::arrange(desc(Fruit))%>%
utils::head(15)
Data$hover <- with(Data, paste( '<b>' , Country , '</b>' , '<br>',
"Bananas", '<b>' , Bananas,'</b>', "kg/year", "<br>",
"Dates", '<b>' , Dates,'</b>', "kg/year", "<br>",
"Citrus", '<b>' , Citrus,'</b>', "kg/year", "<br>",
"Oranges", '<b>' , Oranges,'</b>', "kg/year", "<br>",
"Apples", '<b>' , Apples,'</b>', "kg/year", "<br>",
"Lemons", '<b>' , Lemons,'</b>', "kg/year", "<br>",
"Grapes", '<b>' , Grapes,'</b>', "kg/year", "<br>",
"Grapefruit", '<b>' , Grapefruit,'</b>', "kg/year", "<br>",
"Pineapples", '<b>' , Pineapples,'</b>', "kg/year", "<br>",
"Plantains", '<b>' , Plantains,'</b>', "kg/year", "<br>",
"Other", '<b>' , Other,'</b>', "kg/year", "<br>"))
D1 <- Data%>%
dplyr::select(-c("Code", "hover"))%>%
tidyr::pivot_longer(
cols = (-Country),
names_to = 'FruitType',
values_to = 'value'
)
D2 <- D1 %>%
dplyr::left_join(Data %>% dplyr::select(Country, Code, Fruit), on = Country)
countryKey <- plotly::highlight_key(Data, ~Country)
base <- plotly::plot_ly(countryKey, color = I("black")) %>%
dplyr::group_by(Country)
plot11 <- D2 %>%
plotly::highlight_key(~Country) %>%
plotly::plot_ly(type='choropleth',
locations=D2$Code,
z=D2$Fruit,
#text=Data$hover,
colorscale="Viridis") %>%
plotly::layout(title = 'Fruit Consumption')  %>%
plotly::highlight("plotly_click", persistent = FALSE, dynamic = TRUE)
plot22 <- D2 %>%
plotly::plot_ly(x = ~Fruit, y = ~value)  %>%
plotly::add_bars() %>%
#layout(barmode = "overlay") %>%
plotly::highlight("plotly_click")
countryKey <- plotly::highlight_key(Pivot_Data_Country, ~Country)
line <- countryKey  %>%
plotly::plot_ly( x = ~ reorder(Country, -Fruit), y = ~Fruit,
name = 'Fruit total', type = 'scatter', mode = 'lines+markers',
text = paste("<br>Country: ", Pivot_Data_Country$Country,"<br>",
Pivot_Data_Country$Fruit, 'kg/year'),
hoverinfo = 'text') %>%
plotly::layout(title= "Which Country Eats the Most Fruits Per Capita?")%>%
plotly::highlight("plotly_click")
bar <- countryKey %>%
plotly::plot_ly()  %>%
plotly::add_bars(x = ~FruitType, y = ~Consumption, color = 'green') %>%
plotly::layout(barmode = "overlay")
crosstalk::bscols(line,bar)
# library(crosstalk)
# countryKey <- highlight_key(Pivot_Data, ~Country)
#
# map <- countryKey %>%
#   plot_ly()%>%
#   group_by(Country, Code) %>%
#   summarise(Consumption = sum(Consumption, na.rm = TRUE)) %>%
#   add_choropleth(
#     locations=~Code,
#     z=~Consumption,
#     #text=Data$hover,
#     colorscale="Viridis") %>%
#   layout(title = 'Fruit Consumption')  %>%
#   highlight("plotly_click", persistent = FALSE, dynamic = TRUE)
#
# barplot <- countryKey %>%
#   plot_ly(x = ~FruitType, y = ~Consumption)  %>%
#   add_bars()
#   #layout(barmode = "overlay")
#
# dotplot <- countryKey %>%
#   plot_ly()%>%
#   group_by(Country, Code) %>%
#   summarise(Consumption = sum(Consumption, na.rm = TRUE)) %>%
#   add_markers(
#     x = ~Country, y = ~Consumption
#   )%>%
#  highlight("plotly_click")
#
# crosstalk::bscols(dotplot,barplot)
fig3 <-  plotly::plot_ly(Data, type='choropleth',
locations=Data$Code,
z=Data$Fruit,
text=Data$hover,
colorscale="Viridis") %>%
plotly::layout(title = 'Fruit Consumption by fruit type/country(2013)')
fig3
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
Pivot_Data_Country <- FunctionPkg::Pivot_Data_Country
Data <- FunctionPkg::FruitData
Top_10_Countries <- Data %>%
dplyr::arrange(desc(Fruit))%>%
utils::head(15)
Pivot_Data <- Data%>%
dplyr::select("Country", 'Code', "Bananas" , "Oranges", "Apples" , "Grapes", "Plantains")%>%
tidyr::pivot_longer(
cols = c("Bananas" , "Oranges", "Apples" , "Grapes", "Plantains"),
names_to = 'FruitType',
values_to = 'Consumption'
)
Countries <- Data %>% dplyr::arrange(desc(Fruit)) %>% utils::head(10)%>% dplyr::select(Country)
Pivot_Data_Country <-Pivot_Data %>%
dplyr::left_join(Data %>% dplyr::select(Country, Fruit), on = Country) %>%
dplyr::filter(Country %in% Countries$Country)%>% dplyr::arrange(desc(Fruit))
Top_10_Countries <- Data %>%
dplyr::arrange(desc(Fruit))%>%
utils::head(15)
Data$hover <- with(Data, paste( '<b>' , Country , '</b>' , '<br>',
"Bananas", '<b>' , Bananas,'</b>', "kg/year", "<br>",
"Dates", '<b>' , Dates,'</b>', "kg/year", "<br>",
"Citrus", '<b>' , Citrus,'</b>', "kg/year", "<br>",
"Oranges", '<b>' , Oranges,'</b>', "kg/year", "<br>",
"Apples", '<b>' , Apples,'</b>', "kg/year", "<br>",
"Lemons", '<b>' , Lemons,'</b>', "kg/year", "<br>",
"Grapes", '<b>' , Grapes,'</b>', "kg/year", "<br>",
"Grapefruit", '<b>' , Grapefruit,'</b>', "kg/year", "<br>",
"Pineapples", '<b>' , Pineapples,'</b>', "kg/year", "<br>",
"Plantains", '<b>' , Plantains,'</b>', "kg/year", "<br>",
"Other", '<b>' , Other,'</b>', "kg/year", "<br>"))
D1 <- Data%>%
dplyr::select(-c("Code", "hover"))%>%
tidyr::pivot_longer(
cols = (-Country),
names_to = 'FruitType',
values_to = 'value'
)
D2 <- D1 %>%
dplyr::left_join(Data %>% dplyr::select(Country, Code, Fruit), on = Country)
countryKey <- plotly::highlight_key(Data, ~Country)
base <- plotly::plot_ly(countryKey, color = I("black")) %>%
dplyr::group_by(Country)
plot11 <- D2 %>%
plotly::highlight_key(~Country) %>%
plotly::plot_ly(type='choropleth',
locations=D2$Code,
z=D2$Fruit,
#text=Data$hover,
colorscale="Viridis") %>%
plotly::layout(title = 'Fruit Consumption')  %>%
plotly::highlight("plotly_click", persistent = FALSE, dynamic = TRUE)
plot22 <- D2 %>%
plotly::plot_ly(x = ~Fruit, y = ~value)  %>%
plotly::add_bars() %>%
#layout(barmode = "overlay") %>%
plotly::highlight("plotly_click")
countryKey <- plotly::highlight_key(Pivot_Data_Country, ~Country)
line <- countryKey  %>%
plotly::plot_ly( x = ~ reorder(Country, -Fruit), y = ~Fruit,
name = 'Fruit total', type = 'scatter', mode = 'lines+markers',
text = paste("<br>Country: ", Pivot_Data_Country$Country,"<br>",
Pivot_Data_Country$Fruit, 'kg/year'),
hoverinfo = 'text') %>%
plotly::layout(title= "Which Country Eats the Most Fruits Per Capita?")%>%
plotly::highlight("plotly_click")
bar <- countryKey %>%
plotly::plot_ly()  %>%
plotly::add_bars(x = ~FruitType, y = ~Consumption, color = 'green') %>%
plotly::layout(barmode = "overlay")
crosstalk::bscols(line,bar)
# library(crosstalk)
# countryKey <- highlight_key(Pivot_Data, ~Country)
#
# map <- countryKey %>%
#   plot_ly()%>%
#   group_by(Country, Code) %>%
#   summarise(Consumption = sum(Consumption, na.rm = TRUE)) %>%
#   add_choropleth(
#     locations=~Code,
#     z=~Consumption,
#     #text=Data$hover,
#     colorscale="Viridis") %>%
#   layout(title = 'Fruit Consumption')  %>%
#   highlight("plotly_click", persistent = FALSE, dynamic = TRUE)
#
# barplot <- countryKey %>%
#   plot_ly(x = ~FruitType, y = ~Consumption)  %>%
#   add_bars()
#   #layout(barmode = "overlay")
#
# dotplot <- countryKey %>%
#   plot_ly()%>%
#   group_by(Country, Code) %>%
#   summarise(Consumption = sum(Consumption, na.rm = TRUE)) %>%
#   add_markers(
#     x = ~Country, y = ~Consumption
#   )%>%
#  highlight("plotly_click")
#
# crosstalk::bscols(dotplot,barplot)
fig3 <-  plotly::plot_ly(Data, type='choropleth',
locations=Data$Code,
z=Data$Fruit,
text=Data$hover,
colorscale="Viridis") %>%
plotly::layout(title = 'Fruit Consumption by fruit type/country(2013)')
fig3
devtools::check()
devtools::check()
devtools::check()
expect_equal(
TestData |> df_apply(round, is.numeric, digits = 2),
TestData |> dplyr::mutate(
double    = c(5.00, 3.22, 4.01, 5.11, 4.78),
integer   = c(0, 10, 20, 30, 40),
low =  letters[1L:n])
)，
devtools::check()
devtools::check()
devtools::check()
find("is_character")
use_mit_license()
